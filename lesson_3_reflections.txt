What happens when you initialize a repository?  Why do you need to do it?

- creates hidden .git subdirectory (containis metadata)
- need to create the structure that can track files and commits


How is the staging area different from the working directory and the repository? 
What value do you think it offers?

- staging area contains files that could be committed
- staging area only contains some of the files in the repository

- value is to track what is available to be committed


How can you use the staging area to make sure you have one commit per logical change?

- move changes from the working directory to the staging area in blocks corresponding 
  to a logical change
- commit after the files for each logical change have been added to the staging area


What are some situations when branches would be helpful in keeping your history organized?
How would brances help?

- want to experiment with a change without modifying the official version
- also allows a bug in the master to be fixed


How do the diagrams help you visualize the branch structure?

- can see the evolution of changes of each branch
- this allows the contents of each commit to be seen


What is the result of merging two branches together?  
Why do we represent it in the diagram the way we do?

- Combining changes from 2 versions of a file
- Diagram allows us to see the evolution of the changes and what commits were merged


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

pros
- reduce amount of grunt work
- reduces possible errors for simple cases

cons
- may be possible to make an error or not see a conflict from side-effects in complicated cases